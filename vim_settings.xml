<application>
  <component name="VimSettings">
    <state version="4" enabled="true" />
    <globalmarks />
    <filemarks>
      <file name="/Dummy.txt" timestamp="1494946696163">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Workspace/localhost-sro/manulogic-front/manulogic-2/src/app/components/ribbon/ribbon.component.html" timestamp="1493162440597">
        <mark key="'" line="154" column="0" />
      </file>
      <file name="$USER_HOME$/Workspace/localhost-sro/manulogic-front/manulogic-2/src/app/components/DND/canvas/dnd-canvas.component.ts" timestamp="1494947734207">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="416" column="4" />
        <mark key="]" line="804" column="5" />
        <mark key="." line="416" column="0" />
        <mark key="^" line="415" column="3" />
        <mark key="n" line="153" column="36" />
      </file>
      <file name="$USER_HOME$/Workspace/localhost-sro/manulogic-front/manulogic-2/src/app/components/ngate-master/ngate-master.component.ts" timestamp="1493163022047">
        <mark key="[" line="42" column="8" />
        <mark key="]" line="50" column="7" />
        <mark key="." line="50" column="7" />
        <mark key="^" line="50" column="7" />
      </file>
      <file name="$USER_HOME$/Workspace/localhost-sro/manulogic-front/manulogic-2/src/app/endpoints.ts" timestamp="1493162387164">
        <mark key="[" line="11" column="44" />
        <mark key="]" line="11" column="43" />
        <mark key="^" line="11" column="43" />
        <mark key="." line="11" column="43" />
      </file>
      <file name="$USER_HOME$/Workspace/localhost-sro/manulogic-front/manulogic-2/src/app/services/DND.service.ts" timestamp="1494947719166">
        <mark key="[" line="242" column="0" />
        <mark key="]" line="242" column="0" />
        <mark key="." line="242" column="0" />
      </file>
    </filemarks>
    <jumps>
      <jump line="54" column="13" filename="$USER_HOME$/Workspace/localhost-sro/manulogic-front/manulogic-2/src/app/components/ribbon/ribbon.component.html" />
      <jump line="154" column="0" filename="$USER_HOME$/Workspace/localhost-sro/manulogic-front/manulogic-2/src/app/components/ribbon/ribbon.component.html" />
      <jump line="627" column="0" filename="$USER_HOME$/Workspace/localhost-sro/manulogic-front/manulogic-2/src/app/services/DND.service.ts" />
      <jump line="191" column="33" filename="$USER_HOME$/Workspace/localhost-sro/manulogic-front/manulogic-2/src/app/services/DND.service.ts" />
      <jump line="439" column="4" filename="$USER_HOME$/Workspace/localhost-sro/manulogic-front/manulogic-2/src/app/services/DND.service.ts" />
      <jump line="191" column="12" filename="$USER_HOME$/Workspace/localhost-sro/manulogic-front/manulogic-2/src/app/components/DND/canvas/dnd-canvas.component.ts" />
      <jump line="207" column="8" filename="$USER_HOME$/Workspace/localhost-sro/manulogic-front/manulogic-2/src/app/components/DND/canvas/dnd-canvas.component.ts" />
      <jump line="147" column="0" filename="$USER_HOME$/Workspace/localhost-sro/manulogic-front/manulogic-2/src/app/components/DND/canvas/dnd-canvas.component.ts" />
      <jump line="341" column="0" filename="$USER_HOME$/Workspace/localhost-sro/manulogic-front/manulogic-2/src/app/components/DND/canvas/dnd-canvas.component.ts" />
      <jump line="146" column="36" filename="$USER_HOME$/Workspace/localhost-sro/manulogic-front/manulogic-2/src/app/components/DND/canvas/dnd-canvas.component.ts" />
      <jump line="18" column="30" filename="$USER_HOME$/Workspace/localhost-sro/manulogic-front/manulogic-2/src/app/components/DND/canvas/dnd-canvas.component.ts" />
      <jump line="45" column="25" filename="$USER_HOME$/Workspace/localhost-sro/manulogic-front/manulogic-2/src/app/components/DND/canvas/dnd-canvas.component.ts" />
      <jump line="74" column="21" filename="$USER_HOME$/Workspace/localhost-sro/manulogic-front/manulogic-2/src/app/components/DND/canvas/dnd-canvas.component.ts" />
      <jump line="112" column="25" filename="$USER_HOME$/Workspace/localhost-sro/manulogic-front/manulogic-2/src/app/components/DND/canvas/dnd-canvas.component.ts" />
      <jump line="118" column="29" filename="$USER_HOME$/Workspace/localhost-sro/manulogic-front/manulogic-2/src/app/components/DND/canvas/dnd-canvas.component.ts" />
      <jump line="124" column="25" filename="$USER_HOME$/Workspace/localhost-sro/manulogic-front/manulogic-2/src/app/components/DND/canvas/dnd-canvas.component.ts" />
      <jump line="136" column="44" filename="$USER_HOME$/Workspace/localhost-sro/manulogic-front/manulogic-2/src/app/components/DND/canvas/dnd-canvas.component.ts" />
      <jump line="53" column="0" filename="$USER_HOME$/Workspace/localhost-sro/manulogic-front/manulogic-2/src/app/components/DND/canvas/dnd-canvas.component.ts" />
      <jump line="258" column="34" filename="$USER_HOME$/Workspace/localhost-sro/manulogic-front/manulogic-2/src/app/components/DND/canvas/dnd-canvas.component.ts" />
      <jump line="0" column="0" filename="$USER_HOME$/Workspace/localhost-sro/manulogic-front/manulogic-2/src/app/components/DND/canvas/dnd-canvas.component.ts" />
    </jumps>
    <registers>
      <register name="1" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="&quot;" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="2" type="2">
        <text encoding="base64">ICAgIC8vIGl0ZW0gdG8gYmUgY3JlYXRlZCBhbmQgYWRkZWQgdG8gY2FudmFzCiAgICBwdWJsaWMgc2VsZWN0ZWRFbGVtZW50cyA9IFtdOwogICAgcHJpdmF0ZSBlbGVtVG9BZGQ7CiAgICBwcml2YXRlIGVsZW1Ub0FkZE9mZnNldFg7CiAgICBwcml2YXRlIGVsZW1Ub0FkZE9mZnNldFk7Cgo=</text>
      </register>
      <register name="3" type="2">
        <text encoding="base64">ICAgIC8qKgogICAgICogR2V0IGFsbCB0aGUgcG9pbnRzIGluIHRoZSBncmlkCiAgICAgKiBAcGFyYW0ge251bWJlcn0gaFNpemUgLSBob3Jpem9udGFsIHNpemUgb2YgdGhlIGNlbGwKICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2U2l6ZSAtIHZlcnRpY2FsIHNpemUgb2YgdGhlIGNlbGwKICAgICAqIEByZXR1cm5zIHt7IGxlZnQ6IG51bWJlciwgdG9wOiBudW1iZXIgfVtdfSAtIGFycmF5IG9mIHRoZSBncmlkIHBvaW50cwogICAgICovCiAgICBnZXRHcmlkUG9pbnRzKGhTaXplOiBudW1iZXIsIHZTaXplOiBudW1iZXIpOiB7IGxlZnQ6IG51bWJlciwgdG9wOiBudW1iZXIgfVtdIHsKICAgICAgICBjb25zdCBncmlkOiB7IGxlZnQ6IG51bWJlciwgdG9wOiBudW1iZXIgfVtdID0gW107CiAgICAgICAgbGV0IGxlZnQgPSAwOwogICAgICAgIGxldCB0b3AgPSAwOwogICAgICAgIGNvbnN0IHJvd3MgPSB0aGlzLkNBTlZBU19DT05GSUcuZ3JpZC5yb3dzOwogICAgICAgIGNvbnN0IGNvbHMgPSB0aGlzLkNBTlZBU19DT05GSUcuZ3JpZC5jb2x1bW5zOwogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcm93czsgKytpKSB7CiAgICAgICAgICAgIGxlZnQgPSBoU2l6ZSAqIGk7CiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY29sczsgKytqKSB7CiAgICAgICAgICAgICAgICB0b3AgPSB2U2l6ZSAqIGo7CiAgICAgICAgICAgICAgICBncmlkLnB1c2goe2xlZnQsIHRvcH0pOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBncmlkOwogICAgfQo=</text>
      </register>
      <register name="4" type="2">
        <text encoding="base64">ICAgIC8qKgogICAgICogQ2FsY3VsYXRlIHdoZXJlIHRoZSBlbGVtZW50IG11c3QgYmUgd2hpbGUgZHJhZ2dpbmcKICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZWZ0IC0geCBwb3NpdGlvbiBvZiBlbGVtZW50CiAgICAgKiBAcGFyYW0ge251bWJlcn0gdG9wICAtIHkgcG9zaXRpb24gb2YgZWxlbWVudAogICAgICovCiAgICBnZXRTbmFwUG9pbnQobGVmdDogbnVtYmVyLCB0b3A6IG51bWJlcikgewogICAgICAgIGNvbnN0IGdyaWQgPSB0aGlzLmdldEdyaWRQb2ludHModGhpcy5DQU5WQVNfQ09ORklHLmdyaWQuaFNpemUsIHRoaXMuQ0FOVkFTX0NPTkZJRy5ncmlkLnZTaXplKTsKCiAgICAgICAgaWYgKGxlZnQgPCBncmlkWzBdLmxlZnQpIHsKICAgICAgICAgICAgbGVmdCA9IGdyaWRbMF0ubGVmdDsKICAgICAgICB9CiAgICAgICAgaWYgKHRvcCA8IGdyaWRbMF0udG9wKSB7CiAgICAgICAgICAgIHRvcCA9IGdyaWRbMF0udG9wOwogICAgICAgIH0KICAgICAgICBpZiAobGVmdCA+IGdyaWRbZ3JpZC5sZW5ndGggLSAxXS5sZWZ0KSB7CiAgICAgICAgICAgIGxlZnQgPSBncmlkW2dyaWQubGVuZ3RoIC0gMV0ubGVmdDsKICAgICAgICB9CiAgICAgICAgaWYgKHRvcCA+IGdyaWRbZ3JpZC5sZW5ndGggLSAxXS50b3ApIHsKICAgICAgICAgICAgdG9wID0gZ3JpZFtncmlkLmxlbmd0aCAtIDFdLnRvcDsKICAgICAgICB9CgogICAgICAgIHJldHVybiBncmlkLmZpbmQoaXRlbSA9PiB7CiAgICAgICAgICAgIHJldHVybiBNYXRoLmFicyhpdGVtLmxlZnQgLSBsZWZ0KSA8IHRoaXMuQ0FOVkFTX0NPTkZJRy5ncmlkLmhTaXplICYmCiAgICAgICAgICAgICAgICBNYXRoLmFicyhpdGVtLnRvcCAtIHRvcCkgPCB0aGlzLkNBTlZBU19DT05GSUcuZ3JpZC52U2l6ZTsKICAgICAgICB9KTsKICAgIH0KCg==</text>
      </register>
      <register name="5" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="6" type="2">
        <text encoding="base64">ICAgIC8qKgogICAgICogQWZ0ZXIgZHJvcHBpbmcgZWxlbWVudCBvdmVyIGNhbnZhcywgYWRkIGl0IHRvIGNhbnZhcyB0aHJvdWdoIGl0cyBWaWV3Q2hpbGQKICAgICAqIEdldCByZWZlcmVuY2Ugb2YgY2FudmFzLCBpdCdzIGlkLCBkb20gZWxlbSwgdmlld0NoaWxkLCBjcmVhdGUgZWxlbWVudAogICAgICogYWNjb3JkaW5nIHRvIHJpYmJvbiBlbGVtZW50IGFuZCBhZGQgdG8gY2FudmFzCiAgICAgKi8KICAgIGFkZEVsZW1Ub0NhbnZhcyhldmVudCwgaXRlbSwgY29tcG9uZW50LCB4PywgeT8pIHsKICAgICAgICAvLyBjYW52YXMgd2hlcmUgZWxlbWVudHMgd2lsbCBiZSBhZGRlZAogICAgICAgIGNvbnN0IGNhbnZhc1JlZjogYW55ID0gdGhpcy5nZXRBY3RpdmVDYW52YXMoKTsKICAgICAgICBjb25zdCBjYW52YXNJZCA9IGNhbnZhc1JlZi5jYW52YXNJZDsgLy8gY2FudmFzIGlkCiAgICAgICAgY29uc3QgY2FudmFzRWxSZWYgPSBjYW52YXNSZWYudGhpc1JlZi5lbC5uYXRpdmVFbGVtZW50OyAvLyBET00gZWxlbQogICAgICAgIGNvbnN0IGNhbnZhc1ZpZXdDaGlsZCA9IGNhbnZhc1JlZi50aGlzUmVmLmNhbnZhc1ZpZXdSZWY7IC8vIHZpZXdDaGlsZCB3aGVyZSBlbGVtZW50cyBhcmUgYWRkZWQKCiAgICAgICAgY2FudmFzUmVmLnRoaXNSZWYuZWxlbWVudElzRHJhZ2dlZE92ZXIgPSBmYWxzZTsgLy8gcmVtb3ZlIGRyYWcgb3ZlciBjbGFzcwoKICAgICAgICAvLyBjYWxjdWxhdGUgcG9zaXRpb24gZm9yIGRyb3AKICAgICAgICBpZiAoIXggfHwgIXkpIHsKICAgICAgICAgICAgeCA9IGV2ZW50LmNsaWVudFggLSAkKGNhbnZhc0VsUmVmKS5vZmZzZXQoKS5sZWZ0IC0gdGhpcy5nZXRFbGVtVG9BZGRPZmZzZXRYKCk7CiAgICAgICAgICAgIHkgPSBldmVudC5jbGllbnRZIC0gJChjYW52YXNFbFJlZikub2Zmc2V0KCkudG9wIC0gdGhpcy5nZXRFbGVtVG9BZGRPZmZzZXRZKCkgKyAkKCdib2R5Jykuc2Nyb2xsVG9wKCk7CiAgICAgICAgfQogICAgICAgIC8vIG1vdmUgdG8gc25hcCBwb2ludHMKICAgICAgICBjb25zdCBwb3MgPSB0aGlzLmdldFNuYXBQb2ludCh4LCB5KTsKICAgICAgICBjb25zdCBub2RlID0gdGhpcy5jcmVhdGVDYW52YXNFbGVtZW50Tm9kZShwb3MubGVmdCwgcG9zLnRvcCwgaXRlbSk7CiAgICAgICAgY29uc3QgY29tcG9uZW50RGF0YSA9IHRoaXMuY3JlYXRlRWxlbWVudENvbXBvbmVudChjYW52YXNFbFJlZiwgY2FudmFzSWQsIG5vZGUsIGNvbXBvbmVudCk7CgogICAgICAgIC8vIGR5bmFtaWNhbGx5IGNyZWF0ZSBjb21wb25lbnQgdXNpbmcgcmVzb2x2ZXIKICAgICAgICB0aGlzLl9pbnN0YW5jZVNlcnZpY2UuYWRkQ29tcG9uZW50VG9Db21wb25lbnQoY2FudmFzVmlld0NoaWxkLCBjb21wb25lbnREYXRhKTsKCiAgICAgICAgdGhpcy5hZGRFbGVtVG9Eb2N1bWVudChub2RlKTsKICAgIH0KCg==</text>
      </register>
      <register name="7" type="4">
        <text encoding="base64">Z2V0Q2FudmFzKGRvY3VtZW50KSB7CiAgICAgICAgY29uc3QgbmdhdGVzID0gZG9jdW1lbnQubmdhdGVzOwogICAgICAgIG5nYXRlcy5mb3JFYWNoKG5nYXRlID0+IHsKCiAgICAgICAgfSkKICAgIH0=</text>
      </register>
      <register name=":" type="4">
        <text>%s/this.CANVAS_CONFIG/this._dndService.CANVAS_CONFIG/g</text>
      </register>
      <register name="-" type="4">
        <text>public</text>
      </register>
      <register name="/" type="4">
        <text>createEle</text>
      </register>
    </registers>
    <search>
      <last-search>createEle</last-search>
      <last-offset />
      <last-pattern>createEle</last-pattern>
      <last-replace>this._dndService.CANVAS_CONFIG</last-replace>
      <last-substitute>this.CANVAS_CONFIG</last-substitute>
      <last-dir>1</last-dir>
      <show-last>false</show-last>
    </search>
    <history>
      <history-search>
        <entry>getsnap</entry>
        <entry>getSna</entry>
        <entry>getGri</entry>
        <entry>a</entry>
        <entry>this.CANVAS_CONFIG</entry>
        <entry>getAc</entry>
        <entry>canvasItem</entry>
        <entry>createelem</entry>
        <entry>createEle</entry>
      </history-search>
      <history-cmd>
        <entry>split</entry>
        <entry>vsplit</entry>
        <entry>w</entry>
        <entry>s/a/b/gc</entry>
        <entry>s/this.CANVAS_CONFIG/this._dndService/g</entry>
        <entry>%s/this.CANVAS_CONFIG/this._dndService/g</entry>
        <entry>%s/this.CANVAS_CONFIG/this._dndService.CANVAS_CONFIG/g</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed C</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed W</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed S</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed D</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
</application>